generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id        String   @id @default(uuid())
  name      String
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  stores     Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")

  @@map("store")
}

model Billboard {
  id        String   @id @default(uuid())
  label     String
  imageUrl  String   @map("image_url")
  store     Store    @relation("StoreToBillboard", fields: [storeId], references: [id])
  storeId   String   @map("store_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  categories Category[] @relation("BillboardToCategory")

  @@index([storeId])
  @@map("billboard")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  storeId     String    @map("store_id")
  billboard   Billboard @relation("BillboardToCategory", fields: [billboardId], references: [id])
  billboardId String    @map("billboard_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  products Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
  @@map("category")
}

model Size {
  id        String   @id @default(uuid())
  name      String
  value     String
  store     Store    @relation("StoreToSize", fields: [storeId], references: [id])
  storeId   String   @map("store_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  products Product[] @relation("SizeToProduct")

  @@index([storeId])
  @@map("size")
}

model Color {
  id        String   @id @default(uuid())
  name      String
  value     String
  store     Store    @relation("StoreToColor", fields: [storeId], references: [id])
  storeId   String   @map("store_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  products Product[] @relation("ColorToProduct")

  @@index([storeId])
  @@map("color")
}

model Product {
  id         String   @id @default(uuid())
  name       String
  price      Int
  isFeatured Boolean  @default(false) @map("is_featured")
  isArchived Boolean  @default(false) @map("is_archived")
  store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  storeId    String   @map("store_id")
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  categoryId String   @map("category_id")
  size       Size     @relation("SizeToProduct", fields: [sizeId], references: [id])
  sizeId     String   @map("size_id")
  color      Color    @relation("ColorToProduct", fields: [colorId], references: [id])
  colorId    String   @map("color_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  images     Image[]     @relation("ProductToImage")
  orderItems OrderItem[] @relation("ProductToOrderItem")

  @@index([colorId])
  @@index([sizeId])
  @@index([categoryId])
  @@index([storeId])
  @@map("product")
}

model Image {
  id        String   @id @default(uuid())
  product   Product  @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)
  productId String   @map("product_id")
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([productId])
  @@map("image")
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation("ProductToOrder", fields: [orderId], references: [id])
  orderId   String  @map("order_id")
  product   Product @relation("ProductToOrderItem", fields: [productId], references: [id])
  productId String  @map("product_id")

  @@index([orderId])
  @@index([productId])
  @@map("order_item")
}

model Order {
  id        String   @id @default(uuid())
  store     Store    @relation("StoreToOrder", fields: [storeId], references: [id])
  storeId   String   @map("store_id")
  isPaid    Boolean  @map("is_paid")
  phone     String   @default("")
  address   String   @default("")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  orderItems OrderItem[] @relation("ProductToOrder")

  @@index([storeId])
  @@map("order")
}
